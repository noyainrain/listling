diff --git a/client/index.js b/client/index.js
index fceaab9..911265b 100644
--- a/client/index.js
+++ b/client/index.js
@@ -120,6 +120,16 @@ micro.UI = class extends HTMLBodyElement {
             return;
         }
 
+        this.activity = new micro.Activity();
+        this.activity.addEventListener("editableedituser", event => {
+            this._storeUser(event.detail.object);
+            this._update();
+        });
+        this.activity.addEventListener("editableeditsettings", event => {
+            this._data.settings = event.detail.object;
+            this._update();
+        });
+
         micro.keyboard.enableActivatedClass();
         micro.bind.transforms.ShortcutContext = micro.keyboard.ShortcutContext;
         micro.bind.transforms.Shortcut = micro.keyboard.Shortcut;
@@ -131,17 +141,20 @@ micro.UI = class extends HTMLBodyElement {
             document.importNode(this.querySelector(".micro-ui-template").content, true),
             this.querySelector("main"));
         this._data = new micro.bind.Watchable({
-            settings: {title: document.title}
+            settings: {title: document.title},
+            notification: null
         });
         micro.bind.bind(this.children, this._data);
 
         let update = () => {
+            this.classList.toggle("micro-ui-notifying", this._data.notification);
             document.querySelector('link[rel=icon][sizes="16x16"]').href =
                 this._data.settings.icon_small || "";
             document.querySelector('link[rel=icon][sizes="192x192"]').href =
                 this._data.settings.icon_large || "";
         };
         this._data.watch("settings", update);
+        this._data.watch("notification", update);
 
         this.features = {
             es6TypedArray: "ArrayBuffer" in window,
@@ -200,7 +213,9 @@ micro.UI = class extends HTMLBodyElement {
                 (async() => {
                     try {
                         let user = await ui.call("GET", `/api/users/${this.user.id}`);
+                        // TODO
                         this.dispatchEvent(new CustomEvent("user-edit", {detail: {user}}));
+                        this.activity.publish("editable-edit", user);
                     } catch (e) {
                         if (e instanceof TypeError || e instanceof micro.APIError &&
                             e.error.__type__ === "AuthenticationError") {
@@ -303,7 +318,6 @@ micro.UI = class extends HTMLBodyElement {
      */
     handleCallError(e) {
         if (e instanceof TypeError) {
-            console.log("STRANGE ERROR", e);
             this.notify(
                 "Oops, you seem to be offline! Please check your connection and try again.");
         } else if (e instanceof micro.APIError && e.error.__type__ === "NotFoundError") {
@@ -385,7 +399,9 @@ micro.UI = class extends HTMLBodyElement {
         try {
             user = await ui.call("PATCH", `/api/users/${this.user.id}`,
                                  {op: "enable_notifications", push_subscription: subscription});
+            // TODO: compatibility
             micro.util.dispatchEvent(this, new CustomEvent("user-edit", {detail: {user}}));
+            this.activity.publish("user-enable-device-notifications", user);
             return "ok";
         } catch (e) {
             if (e instanceof micro.APIError &&
@@ -504,15 +520,44 @@ micro.UI = class extends HTMLBodyElement {
 
         } else if (event.target === window && event.type === "popstate") {
             this._route(location.pathname).catch(micro.util.catch);
+        }
+    }
+};
 
-        } else if (event.target === this && event.type === "user-edit") {
-            this._storeUser(event.detail.user);
-            this._update();
+/** TODO. */
+micro.editUser = async function(attrs) {
+    try {
+        let user = await ui.call("POST", `/api/users/${ui.user.id}`, attrs);
+        ui.activity.publish("editable-edit", user);
+        // TODO compatibility
+        ui.dispatchEvent(new CustomEvent("user-edit", {detail: {user}}));
+    } catch (e) {
+        ui.handleCallError(e);
+    }
+};
 
-        } else if (event.target === this && event.type === "settings-edit") {
-            this._data.settings = event.detail.settings;
-            this._update();
+/** TODO. */
+micro.Activity = class extends EventTarget {
+    /** TODO. */
+    publish(type, object, detail = {}) {
+        let event = {type, object, user: ui.user, detail};
+        let typ = event.type.replace("-", "");
+        console.log(typ, event);
+        if (object) {
+            console.log("OBJECT", `${typ}${object.__type__.toLowerCase()}`);
+            this.dispatchEvent(new CustomEvent(`${typ}${object.__type__.toLowerCase()}`, {detail: event}));
         }
+        this.dispatchEvent(new CustomEvent(typ, {detail: event}));
+        this.dispatchEvent(new CustomEvent("event", {detail: event}));
+        // User:
+        //   dis/enable device notifications
+        //   set / remove email [legacy]
+        //   edit user
+        // global:
+        //   edit settings
+        //   hello: add greeting
+        // $context:
+        //   sub unsub + order + trash (mixins, attachments)
     }
 };
 
@@ -531,7 +576,7 @@ micro.SimpleNotification = class extends HTMLElement {
     handleEvent(event) {
         if (event.currentTarget === this.querySelector(".micro-simple-notification-dismiss") &&
                 event.type === "click") {
-            this.parentNode.removeChild(this);
+            ui.notify(null);
         }
     }
 };
@@ -965,6 +1010,13 @@ micro.EditUserPage = class extends micro.Page {
         this.caption = "Edit user settings";
         this.appendChild(document.importNode(
             ui.querySelector(".micro-edit-user-page-template").content, true));
+        this._data = {
+            save: async() => {
+                await micro.editUser({name: this._form.elements.name.value});
+            }
+        };
+        micro.bind.bind(this.children, this._data);
+
         this._form = this.querySelector("form");
         this.querySelector(".micro-edit-user-edit").addEventListener("submit", this);
 
@@ -1098,24 +1150,7 @@ micro.EditUserPage = class extends micro.Page {
     }
 
     handleEvent(event) {
-        if (event.currentTarget === this._form) {
-            event.preventDefault();
-            (async() => {
-                try {
-                    let user = await ui.call("POST", `/api/users/${this._user.id}`, {
-                        name: this._form.elements.name.value
-                    });
-                    ui.dispatchEvent(new CustomEvent("user-edit", {detail: {user}}));
-                } catch (e) {
-                    if (e instanceof micro.APIError && e.error.__type__ === "InputError") {
-                        ui.notify("The name is missing.");
-                    } else {
-                        ui.handleCallError(e);
-                    }
-                }
-            })().catch(micro.util.catch);
-
-        } else if (event.currentTarget === this._setEmailAction && event.type === "click") {
+        if (event.currentTarget === this._setEmailAction && event.type === "click") {
             this._setEmail().catch(micro.util.catch);
         } else if (event.currentTarget === this._cancelSetEmailAction && event.type === "click") {
             this._cancelSetEmail();
@@ -1165,9 +1200,11 @@ micro.EditSettingsPage = class extends micro.Page {
                         provider_description: description,
                         feedback_url: form.elements.feedback_url.value
                     });
-                    ui.navigate("/").catch(micro.util.catch);
+                    // TODO
                     micro.util.dispatchEvent(ui,
                                              new CustomEvent("settings-edit", {detail: {settings}}));
+                    ui.activity.publish("editable-edit", settings);
+                    ui.navigate("/").catch(micro.util.catch);
                 } catch (e) {
                     ui.handleCallError(e);
                 }
diff --git a/client/micro.css b/client/micro.css
index 4fbca54..eb7cccb 100644
--- a/client/micro.css
+++ b/client/micro.css
@@ -552,6 +552,11 @@ legend::after {
     cursor: move;
 }
 
+.micro-ui-notifying main {
+    filter: blur(1px) opacity(50%);
+    pointer-events: none;
+}
+
 .micro-ui-inside {
     box-sizing: content-box;
     max-width: 70ch;
@@ -655,6 +660,12 @@ main {
     margin-bottom: 0;
 }
 
+.micro-notification h1 {
+    font-size: 1rem;
+    font-weight: bold;
+    border-bottom: none;
+}
+
 /* ---- SimpleNotification ---- */
 
 .micro-simple-notification-content > :first-child {
diff --git a/client/templates.html b/client/templates.html
index 88f6b69..ada4cc3 100644
--- a/client/templates.html
+++ b/client/templates.html
@@ -62,7 +62,7 @@
             </ul>
         </nav>
 
-        <div class="micro-ui-notification-space"></div>
+        <div class="micro-ui-notification-space" data-content="notification"></div>
     </header>
 </template>
 <style>
@@ -186,12 +186,14 @@
     <h1>Edit user settings</h1>
     <form class="micro-edit-user-edit">
         <label>
-            <input name="name" />
+            <input name="name" required="required" />
             <small>Name</small>
             <small>Your name or nick name.</small>
         </label>
         <p>
-            <button class="action"><i class="fa fa-check-circle"></i> Save</button>
+            <button is="micro-button" class="action" data-run="save">
+                <i class="fa fa-check-circle"></i> Save
+            </button>
         </p>
     </form>
 
diff --git a/hello/hello.js b/hello/hello.js
index 6218a7c..1a3ee6b 100644
--- a/hello/hello.js
+++ b/hello/hello.js
@@ -57,7 +57,7 @@ hello.StartPage = class extends micro.Page {
                     let form = this.querySelector("form");
                     let greeting = await ui.call("POST", "/api/greetings",
                                                  {text: form.elements.text.value});
-                    this._data.greetings.unshift(greeting);
+                    ui.activity.publish("create-greeting", null, {greeting});
                     form.reset();
                 } catch (e) {
                     ui.handleCallError(e);
